Simulation d’un test d’intrusion (pentest)

Nous décrivons un scénario type de test d’intrusion (black-box) sur le SI du CHU Ynov, en suivant les phases classiques :
	•	Reconnaissance : collecte d’informations publiques (enregistrements DNS du CHU, IP ouvertes, versions applicatives).Utilisation d’outils comme Nmap ou Masscan pour cartographier les hôtes actifs et les services exposés à Internet (serveur Exchange, VPN, site web du CHU, etc.).
	•	Analyse de vulnérabilités : scan avec Nessus/OpenVAS pour identifier les failles connues (mauvais patch d’Exchange, serveur RDP exposé, vieille version de Windows Server). Par exemple, un port RDP 3389 ouvert permettrait de tester une brute-force ou l’exploit BlueKeep.
	•	Exploitation : supposons que le test découvre une faille de type « ProxyLogon » (CVE‑2021‑26855) sur Exchange. Metasploit est alors utilisé pour exécuter un payload (meterpreter) à distance. L’équipe de test simule aussi une attaque de phishing interne (e-mail de test vers un utilisateur médical) pour récupérer un compte basique.
	•	Escalade de privilèges : une fois dans le réseau, l’attaquant charge Mimikatz pour extraire des hash de mots de passe depuis la mémoire du serveur compromis. Avec un compte de niveau administratif faible obtenu ainsi, il tente de se connecter au contrôleur de domaine. Ce scénario illustre l’importance du principe du moindre privilège  : un compte limité permettrait de restreindre l’impact.
	•	Mouvements latéraux : les tests révèlent par exemple qu’un segment RSPSI n’est pas correctement isolé du réseau interne. Les attaquants pivotent vers le segment administratif (serveur RH, paies). Un outil comme BloodHound permet de cartographier les relations de confiance et d’atteindre progressivement les comptes de rang supérieur.
	•	Exfiltration et persistance : en fin de test, on simule l’exfiltration de fichiers fictifs (exporter une base démo) vers un serveur de test externe pour valider la procédure d’alerte sur fuite de données. Des backdoors (scripts PowerShell malveillants) sont laissées sur des VM isolées pour tester la détection.

Outils utilisés : Nmap, Nessus/OpenVAS, Metasploit Framework, Mimikatz, Responder, BloodHound, Burp Suite, Hydra, Cain&Abel, et des scripts maison. Ces outils permettent d’illustrer les vulnérabilités d’AD, de PKI et d’applications web. Le rapport de pentest inclut un inventaire des failles identifiées (ex. « serveur de messagerie non patché, mots de passe faibles ») et des recommandations (patch, MFA, segmentation accrue).
L’exercice de test d’intrusion met en lumière la nécessité de mesures préventives (correctifs et audits) et de réponse (IDS/EDR, journalisation), validant la robustesse du plan de sécurité.
